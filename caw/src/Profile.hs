{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
-- Example:
--
-- ```
-- ~/.caw.yaml
--      user:    <username>
--      token:   <auth token generated by http://cisaw.io>
-- ```
--
module Profile where

import           Control.Applicative
import qualified Control.Exception as X
import           Control.Monad ((<=<),foldM)
import qualified Data.ByteString.Char8 as BC
import qualified Data.Map as Map
import qualified Data.Text.Encoding as T
import           Data.Text (Text)
import           Data.Yaml.YamlLight
import           Text.Read (readMaybe)
import           Network.Socket (HostName)
import           System.Environment (getEnv)
import           System.FilePath
import           Caw.Types

data Profile =
        Profile { username    :: User
                , secretToken :: Text
                , cisawHost   :: HostName
                , cisawPort   :: Int
                }
     deriving (Show)

defaultProfile :: Profile
defaultProfile = Profile (User "guest" "") "no" defaultServer defaultPort

defaultServer :: HostName
defaultServer = "https://cisaw.io"

defaultPort :: Int
defaultPort = 443

readProfileFile :: FilePath -> IO (Maybe Profile)
readProfileFile fp =
    X.catch doread
            (\(_::X.SomeException) -> pure Nothing)
 where
 doread :: IO (Maybe Profile)
 doread = convertYamlToProfile <$> parseYamlFile fp

 convertYamlToProfile :: YamlLight -> Maybe Profile
 convertYamlToProfile YNil = Nothing
 convertYamlToProfile (YSeq _seq) = Nothing
 convertYamlToProfile (YStr _str) = Nothing
 convertYamlToProfile (YMap   mp) =
    do let lk = flip Map.lookup mp . YStr
       user   <- fmap userFromText <$> readText =<< lk "user"
       token  <- readText =<< lk "token"
       server <- (readServer =<< lk "server") <|> pure defaultServer
       port  <- (readPort =<< lk "port") <|> pure defaultPort
       pure $ Profile user token server port
  where
   readServer = readStr
   readPort   = readMaybe <=< readStr
   readStr (YStr s) = Just (BC.unpack s)
   readStr _        = Nothing
   readText (YStr s)  = Just (T.decodeUtf8 s)
   readText _         = Nothing

defaultProfileLocations :: FilePath -> [FilePath]
defaultProfileLocations home =
    map (home </>) [ ".caw.yaml"
                   , "/.config/caw.yaml"
                   , "/.caw/caw.yaml"
                   ]

findAndReadProfileFile :: IO (Maybe Profile)
findAndReadProfileFile =
  do home <- getEnv "HOME"
     foldM go Nothing (defaultProfileLocations home)
 where
  go (Just x) _ = pure $ Just x
  go Nothing fp = readProfileFile fp
